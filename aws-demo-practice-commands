# terraform {
#   required_providers {
#     aws = {
#       source  = "hashicorp/aws"
#       version = "~> 5.0"
#     }
#   }
# }

# Configure the AWS Provider
# provider "aws" {
#   region = "us-east-1"
# }

resource "aws_instance" "instance_for_demoPurpose" {
  ami           = "ami-04b70fa74e45c3917"
  instance_type = "t2.micro"

  tags = {
    Name = "Only-for-demo-purpose-Terraform"
  }
}

should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

┌──(kali㉿The-beast)-[~/Terraform-for-beginners/gitRepo]
└─$ terraform apply --auto-approve

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # github_repository.firstGitRepo_By_terraform will be created
  + resource "github_repository" "firstGitRepo_By_terraform" {
      + allow_auto_merge            = false
      + allow_merge_commit          = true
      + allow_rebase_merge          = true
      + allow_squash_merge          = true
      + archived                    = false
      + auto_init                   = true
      + default_branch              = (known after apply)
      + delete_branch_on_merge      = false
      + description                 = "My first github repo creating during learning terraform by Gauvar Sharma"
      + etag                        = (known after apply)
      + full_name                   = (known after apply)
      + git_clone_url               = (known after apply)
      + html_url                    = (known after apply)
      + http_clone_url              = (known after apply)
      + id                          = (known after apply)
      + merge_commit_message        = "PR_TITLE"
      + merge_commit_title          = "MERGE_MESSAGE"
      + name                        = "First_github_repository_by_terraform"
      + node_id                     = (known after apply)
      + primary_language            = (known after apply)
      + private                     = (known after apply)
      + repo_id                     = (known after apply)
      + squash_merge_commit_message = "COMMIT_MESSAGES"
      + squash_merge_commit_title   = "COMMIT_OR_PR_TITLE"
      + ssh_clone_url               = (known after apply)
      + svn_url                     = (known after apply)
      + topics                      = (known after apply)
      + visibility                  = "public"
      + web_commit_signoff_required = false
    }

Plan: 1 to add, 0 to change, 0 to destroy.
github_repository.firstGitRepo_By_terraform: Creating...
╷
│ Warning: Value for undeclared variable
│ 
│ The root module does not declare a variable named "token" but a value was found in file "terraform.tfvars". If you meant to use this value, add a
│ "variable" block to the configuration.
│ 
│ To silence these warnings, use TF_VAR_... environment variables to provide certain "global" settings to all configurations in your organization. To
│ reduce the verbosity of these warnings, use the -compact-warnings option.
╵
╷
│ Error: POST https://api.github.com/user/repos: 401 Requires authentication []
│ 
│   with github_repository.firstGitRepo_By_terraform,
│   on FirstGitRepo.tf line 5, in resource "github_repository" "firstGitRepo_By_terraform":
│    5: resource "github_repository" "firstGitRepo_By_terraform" {
│ 
╵

┌──(kali㉿The-beast)-[~/Terraform-for-beginners/gitRepo]
└─$ terraform plan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # github_repository.firstGitRepo_By_terraform will be created
  + resource "github_repository" "firstGitRepo_By_terraform" {
      + allow_auto_merge            = false
      + allow_merge_commit          = true
      + allow_rebase_merge          = true
      + allow_squash_merge          = true
      + archived                    = false
      + auto_init                   = true
      + default_branch              = (known after apply)
      + delete_branch_on_merge      = false
      + description                 = "My first github repo creating during learning terraform by Gauvar Sharma"
      + etag                        = (known after apply)
      + full_name                   = (known after apply)
      + git_clone_url               = (known after apply)
      + html_url                    = (known after apply)
      + http_clone_url              = (known after apply)
      + id                          = (known after apply)
      + merge_commit_message        = "PR_TITLE"
      + merge_commit_title          = "MERGE_MESSAGE"
      + name                        = "First_github_repository_by_terraform"
      + node_id                     = (known after apply)
      + primary_language            = (known after apply)
      + private                     = (known after apply)
      + repo_id                     = (known after apply)
      + squash_merge_commit_message = "COMMIT_MESSAGES"
      + squash_merge_commit_title   = "COMMIT_OR_PR_TITLE"
      + ssh_clone_url               = (known after apply)
      + svn_url                     = (known after apply)
      + topics                      = (known after apply)
      + visibility                  = "public"
      + web_commit_signoff_required = false
    }

Plan: 1 to add, 0 to change, 0 to destroy.
╷
│ Warning: Value for undeclared variable
│ 
│ The root module does not declare a variable named "token" but a value was found in file "terraform.tfvars". If you meant to use this value, add a
│ "variable" block to the configuration.
│ 
│ To silence these warnings, use TF_VAR_... environment variables to provide certain "global" settings to all configurations in your organization. To
│ reduce the verbosity of these warnings, use the -compact-warnings option.
╵

───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply" now.

┌──(kali㉿The-beast)-[~/Terraform-for-beginners/gitRepo]
└─$ terraform fmt
providers.tf
terraform.tfvars

┌──(kali㉿The-beast)-[~/Terraform-for-beginners/gitRepo]
└─$ terraform apply --auto-approve

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # github_repository.firstGitRepo_By_terraform will be created
  + resource "github_repository" "firstGitRepo_By_terraform" {
      + allow_auto_merge            = false
      + allow_merge_commit          = true
      + allow_rebase_merge          = true
      + allow_squash_merge          = true
      + archived                    = false
      + auto_init                   = true
      + default_branch              = (known after apply)
      + delete_branch_on_merge      = false
      + description                 = "My first github repo creating during learning terraform by Gauvar Sharma"
      + etag                        = (known after apply)
      + full_name                   = (known after apply)
      + git_clone_url               = (known after apply)
      + html_url                    = (known after apply)
      + http_clone_url              = (known after apply)
      + id                          = (known after apply)
      + merge_commit_message        = "PR_TITLE"
      + merge_commit_title          = "MERGE_MESSAGE"
      + name                        = "First_github_repository_by_terraform"
      + node_id                     = (known after apply)
      + primary_language            = (known after apply)
      + private                     = (known after apply)
      + repo_id                     = (known after apply)
      + squash_merge_commit_message = "COMMIT_MESSAGES"
      + squash_merge_commit_title   = "COMMIT_OR_PR_TITLE"
      + ssh_clone_url               = (known after apply)
      + svn_url                     = (known after apply)
      + topics                      = (known after apply)
      + visibility                  = "public"
      + web_commit_signoff_required = false
    }

Plan: 1 to add, 0 to change, 0 to destroy.
github_repository.firstGitRepo_By_terraform: Creating...
github_repository.firstGitRepo_By_terraform: Creation complete after 5s [id=First_github_repository_by_terraform]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.

┌──(kali㉿The-beast)-[~/Terraform-for-beginners/gitRepo]
└─$ terraform fmt

┌──(kali㉿The-beast)-[~/Terraform-for-beginners/gitRepo]
└─$ terraform validate
Success! The configuration is valid.


┌──(kali㉿The-beast)-[~/Terraform-for-beginners/gitRepo]
└─$ terraform destroy
github_repository.firstGitRepo_By_terraform: Refreshing state... [id=First_github_repository_by_terraform]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  - destroy

Terraform will perform the following actions:

  # github_repository.firstGitRepo_By_terraform will be destroyed
  - resource "github_repository" "firstGitRepo_By_terraform" {
      - allow_auto_merge            = false -> null
      - allow_merge_commit          = true -> null
      - allow_rebase_merge          = true -> null
      - allow_squash_merge          = true -> null
      - allow_update_branch         = false -> null
      - archived                    = false -> null
      - auto_init                   = true -> null
      - default_branch              = "main" -> null
      - delete_branch_on_merge      = false -> null
      - description                 = "My first github repo creating during learning terraform by Gauvar Sharma" -> null
      - etag                        = "W/\"54e1e6c6ec2f2c7288baa66377e971517edc71f968005ae78d96453941b10ff3\"" -> null
      - full_name                   = "BhimSingh-cloudEr/First_github_repository_by_terraform" -> null
      - git_clone_url               = "git://github.com/BhimSingh-cloudEr/First_github_repository_by_terraform.git" -> null
      - has_discussions             = false -> null
      - has_downloads               = false -> null
      - has_issues                  = false -> null
      - has_projects                = false -> null
      - has_wiki                    = false -> null
      - html_url                    = "https://github.com/BhimSingh-cloudEr/First_github_repository_by_terraform" -> null
      - http_clone_url              = "https://github.com/BhimSingh-cloudEr/First_github_repository_by_terraform.git" -> null
      - id                          = "First_github_repository_by_terraform" -> null
      - is_template                 = false -> null
      - merge_commit_message        = "PR_TITLE" -> null
      - merge_commit_title          = "MERGE_MESSAGE" -> null
      - name                        = "First_github_repository_by_terraform" -> null
      - node_id                     = "R_kgDOL9w8IA" -> null
      - private                     = false -> null
      - repo_id                     = 802962464 -> null
      - squash_merge_commit_message = "COMMIT_MESSAGES" -> null
      - squash_merge_commit_title   = "COMMIT_OR_PR_TITLE" -> null
      - ssh_clone_url               = "git@github.com:BhimSingh-cloudEr/First_github_repository_by_terraform.git" -> null
      - svn_url                     = "https://github.com/BhimSingh-cloudEr/First_github_repository_by_terraform" -> null
      - topics                      = [] -> null
      - visibility                  = "public" -> null
      - vulnerability_alerts        = false -> null
      - web_commit_signoff_required = false -> null

      - security_and_analysis {
          - secret_scanning {
              - status = "enabled" -> null
            }
          - secret_scanning_push_protection {
              - status = "enabled" -> null
            }
        }
    }

Plan: 0 to add, 0 to change, 1 to destroy.

Do you really want to destroy all resources?
  Terraform will destroy all your managed infrastructure, as shown above.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value: yes

github_repository.firstGitRepo_By_terraform: Destroying... [id=First_github_repository_by_terraform]
github_repository.firstGitRepo_By_terraform: Destruction complete after 0s

Destroy complete! Resources: 1 destroyed.

┌──(kali㉿The-beast)-[~/Terraform-for-beginners/gitRepo]
└─$ terraform refresh
╷
│ Warning: Empty or non-existent state
│ 
│ There are currently no remote objects tracked in the state, so there is nothing to refresh.
╵

┌──(kali㉿The-beast)-[~/Terraform-for-beginners/gitRepo]
└─$ terraform show
The state file is empty. No resources are represented.

┌──(kali㉿The-beast)-[~/Terraform-for-beginners/gitRepo]
└─$ terraform apply --auto-approve

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # github_repository.firstGitRepo_By_terraform will be created
  + resource "github_repository" "firstGitRepo_By_terraform" {
      + allow_auto_merge            = false
      + allow_merge_commit          = true
      + allow_rebase_merge          = true
      + allow_squash_merge          = true
      + archived                    = false
      + auto_init                   = true
      + default_branch              = (known after apply)
      + delete_branch_on_merge      = false
      + description                 = "My first github repo creating during learning terraform by Gauvar Sharma"
      + etag                        = (known after apply)
      + full_name                   = (known after apply)
      + git_clone_url               = (known after apply)
      + html_url                    = (known after apply)
      + http_clone_url              = (known after apply)
      + id                          = (known after apply)
      + merge_commit_message        = "PR_TITLE"
      + merge_commit_title          = "MERGE_MESSAGE"
      + name                        = "First_github_repository_by_terraform"
      + node_id                     = (known after apply)
      + primary_language            = (known after apply)
      + private                     = (known after apply)
      + repo_id                     = (known after apply)
      + squash_merge_commit_message = "COMMIT_MESSAGES"
      + squash_merge_commit_title   = "COMMIT_OR_PR_TITLE"
      + ssh_clone_url               = (known after apply)
      + svn_url                     = (known after apply)
      + topics                      = (known after apply)
      + visibility                  = "public"
      + web_commit_signoff_required = false
    }

Plan: 1 to add, 0 to change, 0 to destroy.
github_repository.firstGitRepo_By_terraform: Creating...
github_repository.firstGitRepo_By_terraform: Creation complete after 6s [id=First_github_repository_by_terraform]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.

┌──(kali㉿The-beast)-[~/Terraform-for-beginners/gitRepo]
└─$ terraform refresh
github_repository.firstGitRepo_By_terraform: Refreshing state... [id=First_github_repository_by_terraform]

┌──(kali㉿The-beast)-[~/Terraform-for-beginners/gitRepo]
└─$ terraform show
# github_repository.firstGitRepo_By_terraform:
resource "github_repository" "firstGitRepo_By_terraform" {
    allow_auto_merge            = false
    allow_merge_commit          = true
    allow_rebase_merge          = true
    allow_squash_merge          = true
    allow_update_branch         = false
    archived                    = false
    auto_init                   = true
    default_branch              = "main"
    delete_branch_on_merge      = false
    description                 = "My first github repo creating during learning terraform by Gauvar Sharma"
    etag                        = "W/\"780e5f8d2d9eeeefdf214a62b9edf34f955ff7ed0ac68bb2384c3edbddc30b84\""
    full_name                   = "BhimSingh-cloudEr/First_github_repository_by_terraform"
    git_clone_url               = "git://github.com/BhimSingh-cloudEr/First_github_repository_by_terraform.git"
    has_discussions             = false
    has_downloads               = false
    has_issues                  = false
    has_projects                = false
    has_wiki                    = false
    html_url                    = "https://github.com/BhimSingh-cloudEr/First_github_repository_by_terraform"
    http_clone_url              = "https://github.com/BhimSingh-cloudEr/First_github_repository_by_terraform.git"
    id                          = "First_github_repository_by_terraform"
    is_template                 = false
    merge_commit_message        = "PR_TITLE"
    merge_commit_title          = "MERGE_MESSAGE"
    name                        = "First_github_repository_by_terraform"
    node_id                     = "R_kgDOL9xE_Q"
    private                     = false
    repo_id                     = 802964733
    squash_merge_commit_message = "COMMIT_MESSAGES"
    squash_merge_commit_title   = "COMMIT_OR_PR_TITLE"
    ssh_clone_url               = "git@github.com:BhimSingh-cloudEr/First_github_repository_by_terraform.git"
    svn_url                     = "https://github.com/BhimSingh-cloudEr/First_github_repository_by_terraform"
    topics                      = []
    visibility                  = "public"
    vulnerability_alerts        = false
    web_commit_signoff_required = false

    security_and_analysis {
        secret_scanning {
            status = "enabled"
        }
        secret_scanning_push_protection {
            status = "enabled"
        }
    }
}

┌──(kali㉿The-beast)-[~/Terraform-for-beginners/gitRepo]
└─$ terraform refresh
github_repository.firstGitRepo_By_terraform: Refreshing state... [id=First_github_repository_by_terraform]

┌──(kali㉿The-beast)-[~/Terraform-for-beginners/gitRepo]
└─$ terraform show
# github_repository.firstGitRepo_By_terraform:
resource "github_repository" "firstGitRepo_By_terraform" {
    allow_auto_merge            = false
    allow_merge_commit          = true
    allow_rebase_merge          = true
    allow_squash_merge          = true
    allow_update_branch         = false
    archived                    = false
    auto_init                   = true
    default_branch              = "main"
    delete_branch_on_merge      = false
    description                 = "My first github repo creating during learning terraform by Gauvar Sharma"
    etag                        = "W/\"264bf47c4463835405646ca220b3126faf2a33151be3842a8ba90aa580562fa2\""
    full_name                   = "BhimSingh-cloudEr/First_github_repository_by_terraform"
    git_clone_url               = "git://github.com/BhimSingh-cloudEr/First_github_repository_by_terraform.git"
    has_discussions             = false
    has_downloads               = false
    has_issues                  = false
    has_projects                = false
    has_wiki                    = false
    html_url                    = "https://github.com/BhimSingh-cloudEr/First_github_repository_by_terraform"
    http_clone_url              = "https://github.com/BhimSingh-cloudEr/First_github_repository_by_terraform.git"
    id                          = "First_github_repository_by_terraform"
    is_template                 = false
    merge_commit_message        = "PR_TITLE"
    merge_commit_title          = "MERGE_MESSAGE"
    name                        = "First_github_repository_by_terraform"
    node_id                     = "R_kgDOL9xE_Q"
    private                     = false
    repo_id                     = 802964733
    squash_merge_commit_message = "COMMIT_MESSAGES"
    squash_merge_commit_title   = "COMMIT_OR_PR_TITLE"
    ssh_clone_url               = "git@github.com:BhimSingh-cloudEr/First_github_repository_by_terraform.git"
    svn_url                     = "https://github.com/BhimSingh-cloudEr/First_github_repository_by_terraform"
    topics                      = []
    visibility                  = "public"
    vulnerability_alerts        = false
    web_commit_signoff_required = false

    security_and_analysis {
        secret_scanning {
            status = "enabled"
        }
        secret_scanning_push_protection {
            status = "enabled"
        }
    }
}

┌──(kali㉿The-beast)-[~/Terraform-for-beginners/gitRepo]
└─$ terraform refresh
github_repository.firstGitRepo_By_terraform: Refreshing state... [id=First_github_repository_by_terraform]

┌──(kali㉿The-beast)-[~/Terraform-for-beginners/gitRepo]
└─$ terraform show
# github_repository.firstGitRepo_By_terraform:
resource "github_repository" "firstGitRepo_By_terraform" {
    allow_auto_merge            = false
    allow_merge_commit          = true
    allow_rebase_merge          = true
    allow_squash_merge          = true
    allow_update_branch         = false
    archived                    = false
    auto_init                   = true
    default_branch              = "main"
    delete_branch_on_merge      = false
    description                 = "My first github repo creating during learning terraform by Gauvar Sharma.  Manually Changes Occures"
    etag                        = "W/\"3b854b62ba242d7f161c88b6faa300d27e2fe37c755648efd1f3899b80e01616\""
    full_name                   = "BhimSingh-cloudEr/First_github_repository_by_terraform"
    git_clone_url               = "git://github.com/BhimSingh-cloudEr/First_github_repository_by_terraform.git"
    has_discussions             = false
    has_downloads               = false
    has_issues                  = false
    has_projects                = false
    has_wiki                    = false
    html_url                    = "https://github.com/BhimSingh-cloudEr/First_github_repository_by_terraform"
    http_clone_url              = "https://github.com/BhimSingh-cloudEr/First_github_repository_by_terraform.git"
    id                          = "First_github_repository_by_terraform"
    is_template                 = false
    merge_commit_message        = "PR_TITLE"
    merge_commit_title          = "MERGE_MESSAGE"
    name                        = "First_github_repository_by_terraform"
    node_id                     = "R_kgDOL9xE_Q"
    private                     = false
    repo_id                     = 802964733
    squash_merge_commit_message = "COMMIT_MESSAGES"
    squash_merge_commit_title   = "COMMIT_OR_PR_TITLE"
    ssh_clone_url               = "git@github.com:BhimSingh-cloudEr/First_github_repository_by_terraform.git"
    svn_url                     = "https://github.com/BhimSingh-cloudEr/First_github_repository_by_terraform"
    topics                      = []
    visibility                  = "public"
    vulnerability_alerts        = false
    web_commit_signoff_required = false

    security_and_analysis {
        secret_scanning {
            status = "enabled"
        }
        secret_scanning_push_protection {
            status = "enabled"
        }
    }
}

┌──(kali㉿The-beast)-[~/Terraform-for-beginners/gitRepo]
└─$ terraform destroy
github_repository.firstGitRepo_By_terraform: Refreshing state... [id=First_github_repository_by_terraform]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  - destroy

Terraform will perform the following actions:

  # github_repository.firstGitRepo_By_terraform will be destroyed
  - resource "github_repository" "firstGitRepo_By_terraform" {
      - allow_auto_merge            = false -> null
      - allow_merge_commit          = true -> null
      - allow_rebase_merge          = true -> null
      - allow_squash_merge          = true -> null
      - allow_update_branch         = false -> null
      - archived                    = false -> null
      - auto_init                   = true -> null
      - default_branch              = "main" -> null
      - delete_branch_on_merge      = false -> null
      - description                 = "My first github repo creating during learning terraform by Gauvar Sharma.  Manually Changes Occures" -> null
      - etag                        = "W/\"3b854b62ba242d7f161c88b6faa300d27e2fe37c755648efd1f3899b80e01616\"" -> null
      - full_name                   = "BhimSingh-cloudEr/First_github_repository_by_terraform" -> null
      - git_clone_url               = "git://github.com/BhimSingh-cloudEr/First_github_repository_by_terraform.git" -> null
      - has_discussions             = false -> null
      - has_downloads               = false -> null
      - has_issues                  = false -> null
      - has_projects                = false -> null
      - has_wiki                    = false -> null
      - html_url                    = "https://github.com/BhimSingh-cloudEr/First_github_repository_by_terraform" -> null
      - http_clone_url              = "https://github.com/BhimSingh-cloudEr/First_github_repository_by_terraform.git" -> null
      - id                          = "First_github_repository_by_terraform" -> null
      - is_template                 = false -> null
      - merge_commit_message        = "PR_TITLE" -> null
      - merge_commit_title          = "MERGE_MESSAGE" -> null
      - name                        = "First_github_repository_by_terraform" -> null
      - node_id                     = "R_kgDOL9xE_Q" -> null
      - private                     = false -> null
      - repo_id                     = 802964733 -> null
      - squash_merge_commit_message = "COMMIT_MESSAGES" -> null
      - squash_merge_commit_title   = "COMMIT_OR_PR_TITLE" -> null
      - ssh_clone_url               = "git@github.com:BhimSingh-cloudEr/First_github_repository_by_terraform.git" -> null
      - svn_url                     = "https://github.com/BhimSingh-cloudEr/First_github_repository_by_terraform" -> null
      - topics                      = [] -> null
      - visibility                  = "public" -> null
      - vulnerability_alerts        = false -> null
      - web_commit_signoff_required = false -> null

      - security_and_analysis {
          - secret_scanning {
              - status = "enabled" -> null
            }
          - secret_scanning_push_protection {
              - status = "enabled" -> null
            }
        }
    }

Plan: 0 to add, 0 to change, 1 to destroy.

Do you really want to destroy all resources?
  Terraform will destroy all your managed infrastructure, as shown above.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value: no

Destroy cancelled.

┌──(kali㉿The-beast)-[~/Terraform-for-beginners/gitRepo]
└─$ terraform validate
Success! The configuration is valid.


┌──(kali㉿The-beast)-[~/Terraform-for-beginners/gitRepo]
└─$ terraform show
# github_repository.firstGitRepo_By_terraform:
resource "github_repository" "firstGitRepo_By_terraform" {
    allow_auto_merge            = false
    allow_merge_commit          = true
    allow_rebase_merge          = true
    allow_squash_merge          = true
    allow_update_branch         = false
    archived                    = false
    auto_init                   = true
    default_branch              = "main"
    delete_branch_on_merge      = false
    description                 = "My first github repo creating during learning terraform by Gauvar Sharma.  Manually Changes Occures"
    etag                        = "W/\"3b854b62ba242d7f161c88b6faa300d27e2fe37c755648efd1f3899b80e01616\""
    full_name                   = "BhimSingh-cloudEr/First_github_repository_by_terraform"
    git_clone_url               = "git://github.com/BhimSingh-cloudEr/First_github_repository_by_terraform.git"
    has_discussions             = false
    has_downloads               = false
    has_issues                  = false
    has_projects                = false
    has_wiki                    = false
    html_url                    = "https://github.com/BhimSingh-cloudEr/First_github_repository_by_terraform"
    http_clone_url              = "https://github.com/BhimSingh-cloudEr/First_github_repository_by_terraform.git"
    id                          = "First_github_repository_by_terraform"
    is_template                 = false
    merge_commit_message        = "PR_TITLE"
    merge_commit_title          = "MERGE_MESSAGE"
    name                        = "First_github_repository_by_terraform"
    node_id                     = "R_kgDOL9xE_Q"
    private                     = false
    repo_id                     = 802964733
    squash_merge_commit_message = "COMMIT_MESSAGES"
    squash_merge_commit_title   = "COMMIT_OR_PR_TITLE"
    ssh_clone_url               = "git@github.com:BhimSingh-cloudEr/First_github_repository_by_terraform.git"
    svn_url                     = "https://github.com/BhimSingh-cloudEr/First_github_repository_by_terraform"
    topics                      = []
    visibility                  = "public"
    vulnerability_alerts        = false
    web_commit_signoff_required = false

    security_and_analysis {
        secret_scanning {
            status = "enabled"
        }
        secret_scanning_push_protection {
            status = "enabled"
        }
    }
}

┌──(kali㉿The-beast)-[~/Terraform-for-beginners/gitRepo]
└─$ terraform refresh
github_repository.firstGitRepo_By_terraform: Refreshing state... [id=First_github_repository_by_terraform]

Outputs:

firstGitRepo_By_terraform_url = "https://github.com/BhimSingh-cloudEr/First_github_repository_by_terraform"

┌──(kali㉿The-beast)-[~/Terraform-for-beginners/gitRepo]
└─$ terraform apply --auto-approve
github_repository.firstGitRepo_By_terraform: Refreshing state... [id=First_github_repository_by_terraform]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  ~ update in-place

Terraform will perform the following actions:

  # github_repository.firstGitRepo_By_terraform will be updated in-place
  ~ resource "github_repository" "firstGitRepo_By_terraform" {
      ~ description                 = "My first github repo creating during learning terraform by Gauvar Sharma.  Manually Changes Occures" -> "My first github repo creating during learning terraform by Gauvar Sharma"
        id                          = "First_github_repository_by_terraform"
        name                        = "First_github_repository_by_terraform"
        # (33 unchanged attributes hidden)

        # (1 unchanged block hidden)
    }

Plan: 0 to add, 1 to change, 0 to destroy.
github_repository.firstGitRepo_By_terraform: Modifying... [id=First_github_repository_by_terraform]
github_repository.firstGitRepo_By_terraform: Modifications complete after 3s [id=First_github_repository_by_terraform]

Apply complete! Resources: 0 added, 1 changed, 0 destroyed.

Outputs:

firstGitRepo_By_terraform_url = "https://github.com/BhimSingh-cloudEr/First_github_repository_by_terraform"

┌──(kali㉿The-beast)-[~/Terraform-for-beginners/gitRepo]
└─$ terraform console
> username
╷
│ Error: Invalid reference
│ 
│   on <console-input> line 1:
│   (source code not available)
│ 
│ A reference to a resource type must be followed by at least one attribute access, specifying the resource name.
╵


> var.username
╷
│ Error: Reference to undeclared input variable
│ 
│   on <console-input> line 1:
│   (source code not available)
│ 
│ An input variable with the name "username" has not been declared. This variable can be declared with a variable "username" {} block.
╵


> github_repository.firstGitRepo_By_terraform_html_url
╷
│ Error: Reference to undeclared resource
│ 
│   on <console-input> line 1:
│   (source code not available)
│ 
│ A managed resource "github_repository" "firstGitRepo_By_terraform_html_url" has not been declared in the root module.
╵


>   value = github_repository.firstGitRepo_By_terraform.html_url
╷
│ Error: Invalid character
│ 
│   on <console-input> line 1:
│   (source code not available)
│ 
│ This character is not used within the language.
╵

╷
│ Error: Invalid expression
│ 
│   on <console-input> line 1:
│   (source code not available)
│ 
│ Expected the start of an expression, but found an invalid expression token.
╵


>  github_repository.firstGitRepo_By_terraform.html_url
"https://github.com/BhimSingh-cloudEr/First_github_repository_by_terraform"
>  github_repository.firstGitRepo_By_terraform.ssh_clone_url
"git@github.com:BhimSingh-cloudEr/First_github_repository_by_terraform.git"
>  github_repository.firstGitRepo_By_terraform.full_name
"BhimSingh-cloudEr/First_github_repository_by_terraform"
>  github_repository.firstGitRepo_By_terraform.html_url
"https://github.com/BhimSingh-cloudEr/First_github_repository_by_terraform"
> exit

┌──(kali㉿The-beast)-[~/Terraform-for-beginners/gitRepo]
└─$ cd ..

┌──(kali㉿The-beast)-[~/Terraform-for-beginners]
└─$ mkdir AWS-file

┌──(kali㉿The-beast)-[~/Terraform-for-beginners]
└─$ cd AWS-file/

┌──(kali㉿The-beast)-[~/Terraform-for-beginners/AWS-file]
└─$ touch provider.tf

┌──(kali㉿The-beast)-[~/Terraform-for-beginners/AWS-file]
└─$ terraform plan
╷
│ Error: Duplicate provider configuration
│ 
│   on provider.tf line 1:
│    1: provider "aws" {
│ 
│ A default (non-aliased) provider configuration for "aws" was already given at instance.tf:11,1-15. If multiple configurations are required, set the
│ "alias" argument for alternative configurations.
╵

┌──(kali㉿The-beast)-[~/Terraform-for-beginners/AWS-file]
└─$ terraform plan
╷
│ Error: Inconsistent dependency lock file
│ 
│ The following dependency selections recorded in the lock file are inconsistent with the current configuration:
│   - provider registry.terraform.io/hashicorp/aws: required by this configuration but no version is selected
│ 
│ To make the initial dependency selections that will initialize the dependency lock file, run:
│   terraform init
╵

┌──(kali㉿The-beast)-[~/Terraform-for-beginners/AWS-file]
└─$ terraform validate
╷
│ Error: Missing required provider
│ 
│ This configuration requires provider registry.terraform.io/hashicorp/aws, but that provider isn't available. You may be able to install it
│ automatically by running:
│   terraform init
╵

┌──(kali㉿The-beast)-[~/Terraform-for-beginners/AWS-file]
└─$ terraform init

Initializing the backend...

Initializing provider plugins...
- Finding latest version of hashicorp/aws...
- Installing hashicorp/aws v5.50.0...
- Installed hashicorp/aws v5.50.0 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

┌──(kali㉿The-beast)-[~/Terraform-for-beginners/AWS-file]
└─$ terraform validate
Success! The configuration is valid.


┌──(kali㉿The-beast)-[~/Terraform-for-beginners/AWS-file]
└─$ terraform plan

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.instance_for_demoPurpose will be created
  + resource "aws_instance" "instance_for_demoPurpose" {
      + ami                                  = "ami-04b70fa74e45c3917"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "Only-for-demo-purpose-Terraform"
        }
      + tags_all                             = {
          + "Name" = "Only-for-demo-purpose-Terraform"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.

───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply" now.

┌──(kali㉿The-beast)-[~/Terraform-for-beginners/AWS-file]
└─$ terraform fmt

┌──(kali㉿The-beast)-[~/Terraform-for-beginners/AWS-file]
└─$ terraform apply --auto-approve

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.instance_for_demoPurpose will be created
  + resource "aws_instance" "instance_for_demoPurpose" {
      + ami                                  = "ami-04b70fa74e45c3917"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "Only-for-demo-purpose-Terraform"
        }
      + tags_all                             = {
          + "Name" = "Only-for-demo-purpose-Terraform"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)
    }

Plan: 1 to add, 0 to change, 0 to destroy.
aws_instance.instance_for_demoPurpose: Creating...
aws_instance.instance_for_demoPurpose: Still creating... [10s elapsed]
aws_instance.instance_for_demoPurpose: Still creating... [20s elapsed]
aws_instance.instance_for_demoPurpose: Still creating... [30s elapsed]
aws_instance.instance_for_demoPurpose: Still creating... [40s elapsed]
aws_instance.instance_for_demoPurpose: Creation complete after 47s [id=i-0eb3e7a22edff0001]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.

┌──(kali㉿The-beast)-[~/Terraform-for-beginners/AWS-file]
└─$ terraform show
# aws_instance.instance_for_demoPurpose:
resource "aws_instance" "instance_for_demoPurpose" {
    ami                                  = "ami-04b70fa74e45c3917"
    arn                                  = "arn:aws:ec2:us-east-1:992382744602:instance/i-0eb3e7a22edff0001"
    associate_public_ip_address          = true
    availability_zone                    = "us-east-1a"
    cpu_core_count                       = 1
    cpu_threads_per_core                 = 1
    disable_api_stop                     = false
    disable_api_termination              = false
    ebs_optimized                        = false
    get_password_data                    = false
    hibernation                          = false
    id                                   = "i-0eb3e7a22edff0001"
    instance_initiated_shutdown_behavior = "stop"
    instance_state                       = "running"
    instance_type                        = "t2.micro"
    ipv6_address_count                   = 0
    ipv6_addresses                       = []
    monitoring                           = false
    placement_partition_number           = 0
    primary_network_interface_id         = "eni-04f09a5f2f28532e2"
    private_dns                          = "ip-172-31-24-21.ec2.internal"
    private_ip                           = "172.31.24.21"
    public_dns                           = "ec2-18-212-245-175.compute-1.amazonaws.com"
    public_ip                            = "18.212.245.175"
    secondary_private_ips                = []
    security_groups                      = [
        "default",
    ]
    source_dest_check                    = true
    subnet_id                            = "subnet-0843d4b6e8e2492bf"
    tags                                 = {
        "Name" = "Only-for-demo-purpose-Terraform"
    }
    tags_all                             = {
        "Name" = "Only-for-demo-purpose-Terraform"
    }
    tenancy                              = "default"
    user_data_replace_on_change          = false
    vpc_security_group_ids               = [
        "sg-0f0a0fe31c902539d",
    ]

    capacity_reservation_specification {
        capacity_reservation_preference = "open"
    }

    cpu_options {
        core_count       = 1
        threads_per_core = 1
    }

    credit_specification {
        cpu_credits = "standard"
    }

    enclave_options {
        enabled = false
    }

    maintenance_options {
        auto_recovery = "default"
    }

    metadata_options {
        http_endpoint               = "enabled"
        http_protocol_ipv6          = "disabled"
        http_put_response_hop_limit = 2
        http_tokens                 = "required"
        instance_metadata_tags      = "disabled"
    }

    private_dns_name_options {
        enable_resource_name_dns_a_record    = false
        enable_resource_name_dns_aaaa_record = false
        hostname_type                        = "ip-name"
    }

    root_block_device {
        delete_on_termination = true
        device_name           = "/dev/sda1"
        encrypted             = false
        iops                  = 3000
        tags                  = {}
        tags_all              = {}
        throughput            = 125
        volume_id             = "vol-059fc66d5c509973e"
        volume_size           = 8
        volume_type           = "gp3"
    }
}

