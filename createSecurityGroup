──(kali㉿The-beast)-[~/Terraform-for-beginners/AWS-file]
└─$ terraform validate
╷
│ Error: Incorrect attribute value type
│ 
│   on instance.tf line 50, in resource "aws_security_group" "allow_tls":
│   50:     cidr_blocks = "0.0.0.0/0"
│ 
│ Inappropriate value for attribute "cidr_blocks": list of string required.
╵
╷
│ Error: Incorrect attribute value type
│ 
│   on instance.tf line 58, in resource "aws_security_group" "allow_tls":
│   58:     cidr_blocks = "0.0.0.0/0"
│ 
│ Inappropriate value for attribute "cidr_blocks": list of string required.
╵
╷
│ Error: Incorrect attribute value type
│ 
│   on instance.tf line 66, in resource "aws_security_group" "allow_tls":
│   66:     cidr_blocks = "0.0.0.0/0"
│ 
│ Inappropriate value for attribute "cidr_blocks": list of string required.
╵
╷
│ Error: Incorrect attribute value type
│ 
│   on instance.tf line 74, in resource "aws_security_group" "allow_tls":
│   74:     cidr_blocks = "0.0.0.0/0"
│ 
│ Inappropriate value for attribute "cidr_blocks": list of string required.
╵

┌──(kali㉿The-beast)-[~/Terraform-for-beginners/AWS-file]
└─$ terraform validate
╷
│ Error: Incorrect attribute value type
│ 
│   on instance.tf line 74, in resource "aws_security_group" "allow_tls":
│   74:     cidr_blocks = "0.0.0.0/0"
│ 
│ Inappropriate value for attribute "cidr_blocks": list of string required.
╵

┌──(kali㉿The-beast)-[~/Terraform-for-beginners/AWS-file]
└─$ terraform validate
Success! The configuration is valid.


┌──(kali㉿The-beast)-[~/Terraform-for-beginners/AWS-file]
└─$ terraform fmt

┌──(kali㉿The-beast)-[~/Terraform-for-beginners/AWS-file]
└─$ terraform apply --auto-approve
aws_key_pair.key-tf: Refreshing state... [id=key-tf]
aws_instance.instance_for_demoPurpose: Refreshing state... [id=i-05163bb9fef7dddd8]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create
  - destroy

Terraform will perform the following actions:

  # aws_instance.instance_for_demoPurpose will be destroyed
  # (because aws_instance.instance_for_demoPurpose is not in configuration)
  - resource "aws_instance" "instance_for_demoPurpose" {
      - ami                                  = "ami-04b70fa74e45c3917" -> null
      - arn                                  = "arn:aws:ec2:us-east-1:992382744602:instance/i-05163bb9fef7dddd8" -> null
      - associate_public_ip_address          = true -> null
      - availability_zone                    = "us-east-1a" -> null
      - cpu_core_count                       = 1 -> null
      - cpu_threads_per_core                 = 1 -> null
      - disable_api_stop                     = false -> null
      - disable_api_termination              = false -> null
      - ebs_optimized                        = false -> null
      - get_password_data                    = false -> null
      - hibernation                          = false -> null
      - id                                   = "i-05163bb9fef7dddd8" -> null
      - instance_initiated_shutdown_behavior = "stop" -> null
      - instance_state                       = "running" -> null
      - instance_type                        = "t2.micro" -> null
      - ipv6_address_count                   = 0 -> null
      - ipv6_addresses                       = [] -> null
      - key_name                             = "key-tf" -> null
      - monitoring                           = false -> null
      - placement_partition_number           = 0 -> null
      - primary_network_interface_id         = "eni-033bc13dc367c77c1" -> null
      - private_dns                          = "ip-172-31-17-194.ec2.internal" -> null
      - private_ip                           = "172.31.17.194" -> null
      - public_dns                           = "ec2-34-224-40-98.compute-1.amazonaws.com" -> null
      - public_ip                            = "34.224.40.98" -> null
      - secondary_private_ips                = [] -> null
      - security_groups                      = [
          - "default",
        ] -> null
      - source_dest_check                    = true -> null
      - subnet_id                            = "subnet-0843d4b6e8e2492bf" -> null
      - tags                                 = {
          - "Name" = "Only-for-demo-purpose-Terraform"
        } -> null
      - tags_all                             = {
          - "Name" = "Only-for-demo-purpose-Terraform"
        } -> null
      - tenancy                              = "default" -> null
      - user_data_replace_on_change          = false -> null
      - vpc_security_group_ids               = [
          - "sg-0f0a0fe31c902539d",
        ] -> null

      - capacity_reservation_specification {
          - capacity_reservation_preference = "open" -> null
        }

      - cpu_options {
          - core_count       = 1 -> null
          - threads_per_core = 1 -> null
        }

      - credit_specification {
          - cpu_credits = "standard" -> null
        }

      - enclave_options {
          - enabled = false -> null
        }

      - maintenance_options {
          - auto_recovery = "default" -> null
        }

      - metadata_options {
          - http_endpoint               = "enabled" -> null
          - http_protocol_ipv6          = "disabled" -> null
          - http_put_response_hop_limit = 2 -> null
          - http_tokens                 = "required" -> null
          - instance_metadata_tags      = "disabled" -> null
        }

      - private_dns_name_options {
          - enable_resource_name_dns_a_record    = false -> null
          - enable_resource_name_dns_aaaa_record = false -> null
          - hostname_type                        = "ip-name" -> null
        }

      - root_block_device {
          - delete_on_termination = true -> null
          - device_name           = "/dev/sda1" -> null
          - encrypted             = false -> null
          - iops                  = 3000 -> null
          - tags                  = {} -> null
          - tags_all              = {} -> null
          - throughput            = 125 -> null
          - volume_id             = "vol-05b2e8cb7571eaba5" -> null
          - volume_size           = 8 -> null
          - volume_type           = "gp3" -> null
        }
    }

  # aws_key_pair.key-tf will be destroyed
  # (because aws_key_pair.key-tf is not in configuration)
  - resource "aws_key_pair" "key-tf" {
      - arn         = "arn:aws:ec2:us-east-1:992382744602:key-pair/key-tf" -> null
      - fingerprint = "5c:ee:f1:88:30:f9:30:f3:17:9b:ba:2f:86:a8:7c:3d" -> null
      - id          = "key-tf" -> null
      - key_name    = "key-tf" -> null
      - key_pair_id = "key-089990e0364190370" -> null
      - key_type    = "rsa" -> null
      - public_key  = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCtP1R3JNu8A4TzSzsWxfOc/PykFGAnbfESGUwzBMKwTE7O2CZe82cIPPYrvBSM1tesnEaa1dwPTzzPaHFgBrUz8cJXIoFeu6nNgXmWv21yc76vg8KF5VvUBT4+jrW5AiBBA7zDrk+Dqi8rDVgq5c7Hh1MgHvFKBxhLDGPGDOmmV/zw48bIklzyzOYPpNT2+GX5KBgS6t3xLv/2wQ5VdCBT+hE3lkwElacMCgQvHNXrhK6oTXiwLMkZNX6FKYQHS41z17wbIT3xpRagaNMDXY+2dq2Rg4G9a/u9FqRffQ2e6BnVGjizLfspm/z97YQHRPb7i+1h595x8SiwtMmjsbEibduFD5y3gtiph4c4jsNJUJoA+hCWwm2e+YzJcoHscGRWxYJvyXk3QBrzEqnWNsc6Rg8ZMN6ZK0LVTAfTUt6ms247xa1pf0F67FdbrYdQnJJrS9IJItsJZCROILfQl1SAf2bjCDtWhbpVWIiFKIcHuRISWrcjS1icWbqwxQXkEu8= kali@The-beast" -> null
      - tags        = {} -> null
      - tags_all    = {} -> null
    }

  # aws_security_group.allow_tls will be created
  + resource "aws_security_group" "allow_tls" {
      + arn                    = (known after apply)
      + description            = "Allow TLS inbound traffic and all outbound traffic"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 3306
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 3306
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 443
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 443
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
            },
        ]
      + name                   = "allow_tls"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "allow_tls"
        }
      + tags_all               = {
          + "Name" = "allow_tls"
        }
      + vpc_id                 = (known after apply)
    }

Plan: 1 to add, 0 to change, 2 to destroy.
aws_instance.instance_for_demoPurpose: Destroying... [id=i-05163bb9fef7dddd8]
aws_security_group.allow_tls: Creating...
aws_security_group.allow_tls: Creation complete after 5s [id=sg-037d2485541d73b1b]
aws_instance.instance_for_demoPurpose: Still destroying... [id=i-05163bb9fef7dddd8, 10s elapsed]
aws_instance.instance_for_demoPurpose: Still destroying... [id=i-05163bb9fef7dddd8, 20s elapsed]
aws_instance.instance_for_demoPurpose: Still destroying... [id=i-05163bb9fef7dddd8, 30s elapsed]
aws_instance.instance_for_demoPurpose: Still destroying... [id=i-05163bb9fef7dddd8, 40s elapsed]
aws_instance.instance_for_demoPurpose: Destruction complete after 43s
aws_key_pair.key-tf: Destroying... [id=key-tf]
aws_key_pair.key-tf: Destruction complete after 1s

Apply complete! Resources: 1 added, 0 changed, 2 destroyed.




                    # terraform {
#   required_providers {
#     aws = {
#       source  = "hashicorp/aws"
#       version = "~> 5.0"
#     }
#   }
# }

# Configure the AWS Provider
# provider "aws" {
# region = "us-east-1"
# }

# resource "aws_instance" "instance_for_demoPurpose" {
#   ami           = "ami-04b70fa74e45c3917"
#   instance_type = "t2.micro"
#   key_name      = "${aws_key_pair.key-tf.key_name}"
#   tags = {
#     Name = "Only-for-demo-purpose-Terraform"
#   }
# }


# resource "aws_key_pair" "key-tf" {
#   key_name   = "key-tf"
#   public_key = file("${path.module}/id_rsa.pub")
# }

# output "printkey-name" {
#   value = aws_key_pair.key-tf.key_name

# }


resource "aws_security_group" "allow_tls" {
  name        = "allow_tls"
  description = "Allow TLS inbound traffic and all outbound traffic"
  tags = {
    Name = "allow_tls"
  }


  # resource "aws_vpc_security_group_ingress_rule" "allow_tls_ipv4" {
  # security_group_id = aws_security_group.allow_tls.id
  ingress {
    from_port   = 443
    protocol    = "tcp"
    to_port     = 443
    cidr_blocks = ["0.0.0.0/0"]
  }
  # resource "aws_vpc_security_group_ingress_rule" "allow_tls_ipv4" {
  # security_group_id = aws_security_group.allow_tls.id
  ingress {
    from_port   = 80
    protocol    = "tcp"
    to_port     = 80
    cidr_blocks = ["0.0.0.0/0"]
  }
  # resource "aws_vpc_security_group_ingress_rule" "allow_tls_ipv4" {
  # security_group_id = aws_security_group.allow_tls.id
  ingress {
    from_port   = 22
    protocol    = "tcp"
    to_port     = 22
    cidr_blocks = ["0.0.0.0/0"]
  }
  # resource "aws_vpc_security_group_ingress_rule" "allow_tls_ipv4"
  ingress {
    # security_group_id = aws_security_group.allow_tls.id
    from_port   = 3306
    protocol    = "tcp"
    to_port     = 3306
    cidr_blocks = ["0.0.0.0/0"]
  }

  # resource "aws_vpc_security_group_ingress_rule" "allow_tls_ipv6" {
  #   security_group_id = aws_security_group.allow_tls.id
  #   from_port         = 443
  #   ip_protocol       = "tcp"
  #   to_port           = 443
  # }

  # resource "aws_vpc_security_group_egress_rule" "allow_all_traffic_ipv4" {
  #   security_group_id = aws_security_group.allow_tls.id
  #   cidr_ipv4         = "0.0.0.0/0"
  #   ip_protocol       = "-1" # semantically equivalent to all ports
  # }
}

# resource "aws_vpc_security_group_egress_rule" "allow_all_traffic_ipv6" {
#   security_group_id = aws_security_group.allow_tls.id
#   cidr_ipv6         = "::/0"
#   ip_protocol       = "-1" # semantically equivalent to all ports
# }
